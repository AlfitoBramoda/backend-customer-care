{
	"info": {
		"_postman_id": "725d4de5-2d0b-48e3-9b1e-acc18d61b9b7",
		"name": "B‑Care API v3.3.4 — Stable IDs + Idempotent DELETE",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "29237812"
	},
	"item": [
		{
			"name": "1) Auth & Health",
			"item": [
				{
					"name": "Login — Agent",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('200',()=>pm.response.to.have.status(200));",
									"pm.test('json',()=>pm.response.to.be.json);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"role\": \"agent\",\n  \"npp\": \"12345678\",\n  \"password\": \"Agent@123\"\n}"
						},
						"url": "{{baseUrl}}/auth/login"
					},
					"response": []
				},
				{
					"name": "Login — Customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('200',()=>pm.response.to.have.status(200));",
									"pm.test('json',()=>pm.response.to.be.json);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"role\": \"customer\",\n  \"email\": \"jane.doe@customer.test\",\n  \"password\": \"Customer@123\"\n}"
						},
						"url": "{{baseUrl}}/auth/login"
					},
					"response": []
				},
				{
					"name": "Health",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('200',()=>pm.response.to.have.status(200));",
									"pm.test('json',()=>pm.response.to.be.json);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/health"
					},
					"response": []
				}
			]
		},
		{
			"name": "2) Resolver & Policies",
			"item": [
				{
					"name": "Resolver (IDs)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('200',()=>pm.response.to.have.status(200));",
									"pm.test('json',()=>pm.response.to.be.json);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/routing/resolve?service_id=1&channel_id=1&complaint_id=1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"routing",
								"resolve"
							],
							"query": [
								{
									"key": "service_id",
									"value": "1"
								},
								{
									"key": "channel_id",
									"value": "1"
								},
								{
									"key": "complaint_id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Resolver (Codes)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/routing/resolve?service_code=ATM&channel_code=ATM&complaint_code=GAGAL_TUNAI",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"routing",
								"resolve"
							],
							"query": [
								{
									"key": "service_code",
									"value": "ATM"
								},
								{
									"key": "channel_code",
									"value": "ATM"
								},
								{
									"key": "complaint_code",
									"value": "GAGAL_TUNAI"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Policies — Active (all)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('200',()=>pm.response.to.have.status(200));",
									"pm.test('json',()=>pm.response.to.be.json);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/policies/active"
					},
					"response": []
				},
				{
					"name": "Policies — Active (filtered)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('200',()=>pm.response.to.have.status(200));",
									"pm.test('json',()=>pm.response.to.be.json);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/policies/active?service_id=1&channel_id=1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"policies",
								"active"
							],
							"query": [
								{
									"key": "service_id",
									"value": "1"
								},
								{
									"key": "channel_id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "3) Tickets — Core & Ops",
			"item": [
				{
					"name": "Create Ticket (IDs)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('201',()=>pm.response.to.have.status(201));",
									"const t=pm.response.json();",
									"pm.environment.set('ticketId', t.id || t.ticket_id);",
									"pm.test('ticketId set',()=>pm.expect(pm.environment.get('ticketId')).to.exist);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"description\": \"ATM menelan kartu (v3.3.3)\",\n  \"priority_id\": 2,\n  \"issue_channel_id\": 1,\n  \"intake_source_id\": 1,\n  \"service_id\": 1,\n  \"customer_id\": 1,\n  \"related_account_id\": 1,\n  \"related_card_id\": 1,\n  \"complaint_id\": 2,\n  \"responsible_agent_id\": 1\n}"
						},
						"url": "{{baseUrl}}/tickets"
					},
					"response": []
				},
				{
					"name": "List Tickets",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('200',()=>pm.response.to.have.status(200));",
									"pm.test('json',()=>pm.response.to.be.json);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/tickets"
					},
					"response": []
				},
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('200',()=>pm.response.to.have.status(200));",
									"pm.test('json',()=>pm.response.to.be.json);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/tickets/search?q=ATM&limit=5",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tickets",
								"search"
							],
							"query": [
								{
									"key": "q",
									"value": "ATM"
								},
								{
									"key": "limit",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Ticket by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('200',()=>pm.response.to.have.status(200));",
									"pm.test('json',()=>pm.response.to.be.json);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/tickets/{{ticketId}}"
					},
					"response": []
				},
				{
					"name": "Replace Ticket (PUT)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('200/201',()=>pm.expect([200,201]).to.include(pm.response.code));"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"description\": \"replace demo\"\n}"
						},
						"url": "{{baseUrl}}/tickets/{{ticketId}}"
					},
					"response": []
				},
				{
					"name": "Patch Ticket",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('200',()=>pm.response.to.have.status(200));",
									"pm.test('json',()=>pm.response.to.be.json);"
								]
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"description\": \"patch demo\"\n}"
						},
						"url": "{{baseUrl}}/tickets/{{ticketId}}"
					},
					"response": []
				},
				{
					"name": "Status Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('200',()=>pm.response.to.have.status(200));",
									"pm.test('json',()=>pm.response.to.be.json);"
								]
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"agent_status\": \"HandledCXC\"\n}"
						},
						"url": "{{baseUrl}}/tickets/{{ticketId}}/status"
					},
					"response": []
				},
				{
					"name": "Assign",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('200',()=>pm.response.to.have.status(200));",
									"pm.test('json',()=>pm.response.to.be.json);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"responsible_agent_id\": 2\n}"
						},
						"url": "{{baseUrl}}/tickets/{{ticketId}}/assign"
					},
					"response": []
				},
				{
					"name": "Set Target SLA",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('200',()=>pm.response.to.have.status(200));",
									"pm.test('json',()=>pm.response.to.be.json);"
								]
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"target_sla\": \"2030-08-20T00:00:00.000Z\"\n}"
						},
						"url": "{{baseUrl}}/tickets/{{ticketId}}/target-sla"
					},
					"response": []
				},
				{
					"name": "Update UIC",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('200',()=>pm.response.to.have.status(200));",
									"pm.test('json',()=>pm.response.to.be.json);"
								]
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"uic_id\": 1\n}"
						},
						"url": "{{baseUrl}}/tickets/{{ticketId}}/uic"
					},
					"response": []
				},
				{
					"name": "Update Priority",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('200',()=>pm.response.to.have.status(200));",
									"pm.test('json',()=>pm.response.to.be.json);"
								]
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"priority_id\": 3\n}"
						},
						"url": "{{baseUrl}}/tickets/{{ticketId}}/priority"
					},
					"response": []
				},
				{
					"name": "Full View",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('200',()=>pm.response.to.have.status(200));",
									"pm.test('json',()=>pm.response.to.be.json);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/tickets/{{ticketId}}/full"
					},
					"response": []
				},
				{
					"name": "Close",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('200',()=>pm.response.to.have.status(200));",
									"pm.test('json',()=>pm.response.to.be.json);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": "{{baseUrl}}/tickets/{{ticketId}}/close"
					},
					"response": []
				},
				{
					"name": "Reopen",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('200',()=>pm.response.to.have.status(200));",
									"pm.test('json',()=>pm.response.to.be.json);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": "{{baseUrl}}/tickets/{{ticketId}}/reopen"
					},
					"response": []
				},
				{
					"name": "Cancel",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('200',()=>pm.response.to.have.status(200));",
									"pm.test('json',()=>pm.response.to.be.json);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": "{{baseUrl}}/tickets/{{ticketId}}/cancel"
					},
					"response": []
				},
				{
					"name": "Stats Summary",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('200',()=>pm.response.to.have.status(200));",
									"pm.test('json',()=>pm.response.to.be.json);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/tickets/stats/summary?window=30d",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tickets",
								"stats",
								"summary"
							],
							"query": [
								{
									"key": "window",
									"value": "30d"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "SLA At-Risk",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('200',()=>pm.response.to.have.status(200));",
									"pm.test('json',()=>pm.response.to.be.json);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/tickets/sla/at-risk?days=7",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tickets",
								"sla",
								"at-risk"
							],
							"query": [
								{
									"key": "days",
									"value": "7"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Ticket (dummy 99999)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('204/200',()=>pm.expect([204,200]).to.include(pm.response.code));"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseUrl}}/tickets/99999"
					},
					"response": []
				}
			]
		},
		{
			"name": "4) Tickets — Nested Resources",
			"item": [
				{
					"name": "List Activities",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('200',()=>pm.response.to.have.status(200));",
									"pm.test('json',()=>pm.response.to.be.json);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/tickets/{{ticketId}}/activities"
					},
					"response": []
				},
				{
					"name": "Create Activity",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('201',()=>pm.response.to.have.status(201));",
									"const a=pm.response.json(); pm.environment.set('activityId', a.activity_id);",
									"pm.test('activityId set',()=>pm.expect(pm.environment.get('activityId')).to.exist);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"sender_id\": 1,\n  \"sender_type\": \"agent\",\n  \"activity_type\": \"Komentar\",\n  \"content\": \"via v3.3.3\"\n}"
						},
						"url": "{{baseUrl}}/tickets/{{ticketId}}/activities"
					},
					"response": []
				},
				{
					"name": "List Attachments",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('200',()=>pm.response.to.have.status(200));",
									"pm.test('json',()=>pm.response.to.be.json);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/tickets/{{ticketId}}/attachments"
					},
					"response": []
				},
				{
					"name": "Create Attachment",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('201',()=>pm.response.to.have.status(201));",
									"pm.test('json',()=>pm.response.to.be.json);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"activity_id\": \"{{activityId}}\",\n  \"file_name\": \"evidence.jpg\",\n  \"file_path\": \"/files/evidence.jpg\",\n  \"file_type\": \"image/jpeg\",\n  \"file_size\": 12345\n}"
						},
						"url": "{{baseUrl}}/tickets/{{ticketId}}/attachments"
					},
					"response": []
				},
				{
					"name": "List Transactions",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('200',()=>pm.response.to.have.status(200));",
									"pm.test('json',()=>pm.response.to.be.json);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/tickets/{{ticketId}}/transactions"
					},
					"response": []
				},
				{
					"name": "Create Transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('201',()=>pm.response.to.have.status(201));",
									"pm.test('json',()=>pm.response.to.be.json);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"transaction_datetime\": \"2030-08-13T01:00:00.000Z\",\n  \"amount\": 100000,\n  \"currency\": \"IDR\",\n  \"terminal_id\": 1,\n  \"rrn\": \"987654321000\",\n  \"stan\": \"654321\"\n}"
						},
						"url": "{{baseUrl}}/tickets/{{ticketId}}/transactions"
					},
					"response": []
				},
				{
					"name": "List Escalations (by ticket)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('200',()=>pm.response.to.have.status(200));",
									"pm.test('json',()=>pm.response.to.be.json);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/tickets/{{ticketId}}/escalations"
					},
					"response": []
				},
				{
					"name": "Create Escalation (by ticket)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('201',()=>pm.response.to.have.status(201));",
									"pm.test('json',()=>pm.response.to.be.json);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"uic_id\": 1,\n  \"notes\": \"via nested\"\n}"
						},
						"url": "{{baseUrl}}/tickets/{{ticketId}}/escalations"
					},
					"response": []
				},
				{
					"name": "List Chat Messages",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('200',()=>pm.response.to.have.status(200));",
									"pm.test('json',()=>pm.response.to.be.json);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/tickets/{{ticketId}}/chat-messages"
					},
					"response": []
				},
				{
					"name": "Create Chat Message",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('201',()=>pm.response.to.have.status(201));",
									"pm.test('json',()=>pm.response.to.be.json);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"sender_id\": 1,\n  \"sender_type\": \"agent\",\n  \"message\": \"ping\"\n}"
						},
						"url": "{{baseUrl}}/tickets/{{ticketId}}/chat-messages"
					},
					"response": []
				},
				{
					"name": "List Call Logs",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('200',()=>pm.response.to.have.status(200));",
									"pm.test('json',()=>pm.response.to.be.json);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/tickets/{{ticketId}}/call-logs"
					},
					"response": []
				},
				{
					"name": "Create Call Log",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('201',()=>pm.response.to.have.status(201));",
									"pm.test('json',()=>pm.response.to.be.json);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"agent_id\": 1,\n  \"customer_id\": 1,\n  \"call_start\": \"2030-08-13T02:00:00.000Z\",\n  \"status\": \"connected\"\n}"
						},
						"url": "{{baseUrl}}/tickets/{{ticketId}}/call-logs"
					},
					"response": []
				},
				{
					"name": "Get Feedback",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/tickets/{{ticketId}}/feedback"
					},
					"response": []
				},
				{
					"name": "Create Feedback",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('201/409',()=>pm.expect([201,409]).to.include(pm.response.code));"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"score\": 5,\n  \"comment\": \"mantap\"\n}"
						},
						"url": "{{baseUrl}}/tickets/{{ticketId}}/feedback"
					},
					"response": []
				}
			]
		},
		{
			"name": "5) UIC & Notifications",
			"item": [
				{
					"name": "UIC — Escalations",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('200',()=>pm.response.to.have.status(200));",
									"pm.test('json',()=>pm.response.to.be.json);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/uic/1/escalations"
					},
					"response": []
				},
				{
					"name": "Mark Notification Read",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": "{{baseUrl}}/notifications/1/read"
					},
					"response": []
				},
				{
					"name": "Bulk Read Notifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('200',()=>pm.response.to.have.status(200));",
									"pm.test('json',()=>pm.response.to.be.json);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"ids\": [\n    1,\n    2,\n    3\n  ]\n}"
						},
						"url": "{{baseUrl}}/notifications/bulk-read"
					},
					"response": []
				}
			]
		},
		{
			"name": "6) Chatbot & Aggregators",
			"item": [
				{
					"name": "Close Session",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": "{{baseUrl}}/chatbot/sessions/1/close"
					},
					"response": []
				},
				{
					"name": "Convert Session → Ticket",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([201,404,400]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"description\": \"Converted from chatbot (v3.3.3)\",\n  \"priority_id\": 3,\n  \"issue_channel_id\": 3,\n  \"intake_source_id\": 2,\n  \"service_id\": 2,\n  \"complaint_id\": 3,\n  \"responsible_agent_id\": 2\n}"
						},
						"url": "{{baseUrl}}/chatbot/sessions/1/convert"
					},
					"response": []
				},
				{
					"name": "Customer Portfolio",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/customers/1/portfolio"
					},
					"response": []
				},
				{
					"name": "Customer Tickets",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('200',()=>pm.response.to.have.status(200));",
									"pm.test('json',()=>pm.response.to.be.json);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/customers/1/tickets"
					},
					"response": []
				},
				{
					"name": "Agent Tickets",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('200',()=>pm.response.to.have.status(200));",
									"pm.test('json',()=>pm.response.to.be.json);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/agents/1/tickets"
					},
					"response": []
				}
			]
		},
		{
			"name": "7) CRUD — 26 Resources (Create→Delete same ID)",
			"item": [
				{
					"name": "customers — List",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/customers"
					},
					"response": []
				},
				{
					"name": "customers — Get (1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/customers/1"
					},
					"response": []
				},
				{
					"name": "customers — Create (demo)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('201/400',()=>pm.expect([201,400]).to.include(pm.response.code));",
									"let j={};try{j=pm.response.json()}catch(e){}",
									"const id = j.id || j['customer_id'];",
									"if (id) pm.environment.set('customers_id', id);",
									"pm.test('id captured (customers_id)', ()=> pm.expect(pm.environment.get('customers_id')||null).to.not.be.null);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"customer_id\": null,\n  \"demo\": \"value\"\n}"
						},
						"url": "{{baseUrl}}/customers"
					},
					"response": []
				},
				{
					"name": "customers — Replace (PUT {created})",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,201,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"customer_id\": 1,\n  \"demo\": \"replace\"\n}"
						},
						"url": "{{baseUrl}}/customers/{{customers_id}}"
					},
					"response": []
				},
				{
					"name": "customers — Update (PATCH {created})",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"demo\": \"patch\"\n}"
						},
						"url": "{{baseUrl}}/customers/{{customers_id}}"
					},
					"response": []
				},
				{
					"name": "customers — Delete (same as Create)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([204,200]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseUrl}}/customers/{{customers_id}}"
					},
					"response": []
				},
				{
					"name": "accounts — List",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/accounts"
					},
					"response": []
				},
				{
					"name": "accounts — Get (1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/accounts/1"
					},
					"response": []
				},
				{
					"name": "accounts — Create (demo)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('201/400',()=>pm.expect([201,400]).to.include(pm.response.code));",
									"let j={};try{j=pm.response.json()}catch(e){}",
									"const id = j.id || j['account_id'];",
									"if (id) pm.environment.set('accounts_id', id);",
									"pm.test('id captured (accounts_id)', ()=> pm.expect(pm.environment.get('accounts_id')||null).to.not.be.null);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"account_id\": null,\n  \"demo\": \"value\"\n}"
						},
						"url": "{{baseUrl}}/accounts"
					},
					"response": []
				},
				{
					"name": "accounts — Replace (PUT {created})",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,201,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"account_id\": 1,\n  \"demo\": \"replace\"\n}"
						},
						"url": "{{baseUrl}}/accounts/{{accounts_id}}"
					},
					"response": []
				},
				{
					"name": "accounts — Update (PATCH {created})",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"demo\": \"patch\"\n}"
						},
						"url": "{{baseUrl}}/accounts/{{accounts_id}}"
					},
					"response": []
				},
				{
					"name": "accounts — Delete (same as Create)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([204,200]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseUrl}}/accounts/{{accounts_id}}"
					},
					"response": []
				},
				{
					"name": "cards — List",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/cards"
					},
					"response": []
				},
				{
					"name": "cards — Get (1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/cards/1"
					},
					"response": []
				},
				{
					"name": "cards — Create (demo)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('201/400',()=>pm.expect([201,400]).to.include(pm.response.code));",
									"let j={};try{j=pm.response.json()}catch(e){}",
									"const id = j.id || j['card_id'];",
									"if (id) pm.environment.set('cards_id', id);",
									"pm.test('id captured (cards_id)', ()=> pm.expect(pm.environment.get('cards_id')||null).to.not.be.null);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"card_id\": null,\n  \"demo\": \"value\"\n}"
						},
						"url": "{{baseUrl}}/cards"
					},
					"response": []
				},
				{
					"name": "cards — Replace (PUT {created})",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,201,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"card_id\": 1,\n  \"demo\": \"replace\"\n}"
						},
						"url": "{{baseUrl}}/cards/{{cards_id}}"
					},
					"response": []
				},
				{
					"name": "cards — Update (PATCH {created})",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"demo\": \"patch\"\n}"
						},
						"url": "{{baseUrl}}/cards/{{cards_id}}"
					},
					"response": []
				},
				{
					"name": "cards — Delete (same as Create)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([204,200]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseUrl}}/cards/{{cards_id}}"
					},
					"response": []
				},
				{
					"name": "agents — List",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/agents"
					},
					"response": []
				},
				{
					"name": "agents — Get (1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/agents/1"
					},
					"response": []
				},
				{
					"name": "agents — Create (demo)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('201/400',()=>pm.expect([201,400]).to.include(pm.response.code));",
									"let j={};try{j=pm.response.json()}catch(e){}",
									"const id = j.id || j['agent_id'];",
									"if (id) pm.environment.set('agents_id', id);",
									"pm.test('id captured (agents_id)', ()=> pm.expect(pm.environment.get('agents_id')||null).to.not.be.null);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"agent_id\": null,\n  \"demo\": \"value\"\n}"
						},
						"url": "{{baseUrl}}/agents"
					},
					"response": []
				},
				{
					"name": "agents — Replace (PUT {created})",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,201,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"agent_id\": 1,\n  \"demo\": \"replace\"\n}"
						},
						"url": "{{baseUrl}}/agents/{{agents_id}}"
					},
					"response": []
				},
				{
					"name": "agents — Update (PATCH {created})",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"demo\": \"patch\"\n}"
						},
						"url": "{{baseUrl}}/agents/{{agents_id}}"
					},
					"response": []
				},
				{
					"name": "agents — Delete (same as Create)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([204,200]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseUrl}}/agents/{{agents_id}}"
					},
					"response": []
				},
				{
					"name": "channels — List",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/channels"
					},
					"response": []
				},
				{
					"name": "channels — Get (1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/channels/1"
					},
					"response": []
				},
				{
					"name": "channels — Create (demo)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('201/400',()=>pm.expect([201,400]).to.include(pm.response.code));",
									"let j={};try{j=pm.response.json()}catch(e){}",
									"const id = j.id || j['channel_id'];",
									"if (id) pm.environment.set('channels_id', id);",
									"pm.test('id captured (channels_id)', ()=> pm.expect(pm.environment.get('channels_id')||null).to.not.be.null);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"channel_id\": null,\n  \"demo\": \"value\"\n}"
						},
						"url": "{{baseUrl}}/channels"
					},
					"response": []
				},
				{
					"name": "channels — Replace (PUT {created})",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,201,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"channel_id\": 1,\n  \"demo\": \"replace\"\n}"
						},
						"url": "{{baseUrl}}/channels/{{channels_id}}"
					},
					"response": []
				},
				{
					"name": "channels — Update (PATCH {created})",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"demo\": \"patch\"\n}"
						},
						"url": "{{baseUrl}}/channels/{{channels_id}}"
					},
					"response": []
				},
				{
					"name": "channels — Delete (same as Create)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([204,200]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseUrl}}/channels/{{channels_id}}"
					},
					"response": []
				},
				{
					"name": "sources — List",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/sources"
					},
					"response": []
				},
				{
					"name": "sources — Get (1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/sources/1"
					},
					"response": []
				},
				{
					"name": "sources — Create (demo)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('201/400',()=>pm.expect([201,400]).to.include(pm.response.code));",
									"let j={};try{j=pm.response.json()}catch(e){}",
									"const id = j.id || j['source_id'];",
									"if (id) pm.environment.set('sources_id', id);",
									"pm.test('id captured (sources_id)', ()=> pm.expect(pm.environment.get('sources_id')||null).to.not.be.null);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"source_id\": null,\n  \"demo\": \"value\"\n}"
						},
						"url": "{{baseUrl}}/sources"
					},
					"response": []
				},
				{
					"name": "sources — Replace (PUT {created})",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,201,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"source_id\": 1,\n  \"demo\": \"replace\"\n}"
						},
						"url": "{{baseUrl}}/sources/{{sources_id}}"
					},
					"response": []
				},
				{
					"name": "sources — Update (PATCH {created})",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"demo\": \"patch\"\n}"
						},
						"url": "{{baseUrl}}/sources/{{sources_id}}"
					},
					"response": []
				},
				{
					"name": "sources — Delete (same as Create)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([204,200]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseUrl}}/sources/{{sources_id}}"
					},
					"response": []
				},
				{
					"name": "services — List",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/services"
					},
					"response": []
				},
				{
					"name": "services — Get (1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/services/1"
					},
					"response": []
				},
				{
					"name": "services — Create (demo)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('201/400',()=>pm.expect([201,400]).to.include(pm.response.code));",
									"let j={};try{j=pm.response.json()}catch(e){}",
									"const id = j.id || j['service_id'];",
									"if (id) pm.environment.set('services_id', id);",
									"pm.test('id captured (services_id)', ()=> pm.expect(pm.environment.get('services_id')||null).to.not.be.null);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"service_id\": null,\n  \"demo\": \"value\"\n}"
						},
						"url": "{{baseUrl}}/services"
					},
					"response": []
				},
				{
					"name": "services — Replace (PUT {created})",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,201,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"service_id\": 1,\n  \"demo\": \"replace\"\n}"
						},
						"url": "{{baseUrl}}/services/{{services_id}}"
					},
					"response": []
				},
				{
					"name": "services — Update (PATCH {created})",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"demo\": \"patch\"\n}"
						},
						"url": "{{baseUrl}}/services/{{services_id}}"
					},
					"response": []
				},
				{
					"name": "services — Delete (same as Create)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([204,200]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseUrl}}/services/{{services_id}}"
					},
					"response": []
				},
				{
					"name": "priorities — List",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/priorities"
					},
					"response": []
				},
				{
					"name": "priorities — Get (1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/priorities/1"
					},
					"response": []
				},
				{
					"name": "priorities — Create (demo)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('201/400',()=>pm.expect([201,400]).to.include(pm.response.code));",
									"let j={};try{j=pm.response.json()}catch(e){}",
									"const id = j.id || j['priority_id'];",
									"if (id) pm.environment.set('priorities_id', id);",
									"pm.test('id captured (priorities_id)', ()=> pm.expect(pm.environment.get('priorities_id')||null).to.not.be.null);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"priority_id\": null,\n  \"demo\": \"value\"\n}"
						},
						"url": "{{baseUrl}}/priorities"
					},
					"response": []
				},
				{
					"name": "priorities — Replace (PUT {created})",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,201,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"priority_id\": 1,\n  \"demo\": \"replace\"\n}"
						},
						"url": "{{baseUrl}}/priorities/{{priorities_id}}"
					},
					"response": []
				},
				{
					"name": "priorities — Update (PATCH {created})",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"demo\": \"patch\"\n}"
						},
						"url": "{{baseUrl}}/priorities/{{priorities_id}}"
					},
					"response": []
				},
				{
					"name": "priorities — Delete (same as Create)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([204,200]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseUrl}}/priorities/{{priorities_id}}"
					},
					"response": []
				},
				{
					"name": "uic — List",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/uic"
					},
					"response": []
				},
				{
					"name": "uic — Get (1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/uic/1"
					},
					"response": []
				},
				{
					"name": "uic — Create (demo)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('201/400',()=>pm.expect([201,400]).to.include(pm.response.code));",
									"let j={};try{j=pm.response.json()}catch(e){}",
									"const id = j.id || j['uic_id'];",
									"if (id) pm.environment.set('uic_id', id);",
									"pm.test('id captured (uic_id)', ()=> pm.expect(pm.environment.get('uic_id')||null).to.not.be.null);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"uic_id\": null,\n  \"demo\": \"value\"\n}"
						},
						"url": "{{baseUrl}}/uic"
					},
					"response": []
				},
				{
					"name": "uic — Replace (PUT {created})",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,201,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"uic_id\": 1,\n  \"demo\": \"replace\"\n}"
						},
						"url": "{{baseUrl}}/uic/{{uic_id}}"
					},
					"response": []
				},
				{
					"name": "uic — Update (PATCH {created})",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"demo\": \"patch\"\n}"
						},
						"url": "{{baseUrl}}/uic/{{uic_id}}"
					},
					"response": []
				},
				{
					"name": "uic — Delete (same as Create)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([204,200]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseUrl}}/uic/{{uic_id}}"
					},
					"response": []
				},
				{
					"name": "complaint-categories — List",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/complaint-categories"
					},
					"response": []
				},
				{
					"name": "complaint-categories — Get (1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/complaint-categories/1"
					},
					"response": []
				},
				{
					"name": "complaint-categories — Create (demo)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('201/400',()=>pm.expect([201,400]).to.include(pm.response.code));",
									"let j={};try{j=pm.response.json()}catch(e){}",
									"const id = j.id || j['complaint_id'];",
									"if (id) pm.environment.set('complaint_categories_id', id);",
									"pm.test('id captured (complaint_categories_id)', ()=> pm.expect(pm.environment.get('complaint_categories_id')||null).to.not.be.null);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"complaint_id\": null,\n  \"demo\": \"value\"\n}"
						},
						"url": "{{baseUrl}}/complaint-categories"
					},
					"response": []
				},
				{
					"name": "complaint-categories — Replace (PUT {created})",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,201,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"complaint_id\": 1,\n  \"demo\": \"replace\"\n}"
						},
						"url": "{{baseUrl}}/complaint-categories/{{complaint_categories_id}}"
					},
					"response": []
				},
				{
					"name": "complaint-categories — Update (PATCH {created})",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"demo\": \"patch\"\n}"
						},
						"url": "{{baseUrl}}/complaint-categories/{{complaint_categories_id}}"
					},
					"response": []
				},
				{
					"name": "complaint-categories — Delete (same as Create)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([204,200]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseUrl}}/complaint-categories/{{complaint_categories_id}}"
					},
					"response": []
				},
				{
					"name": "slas — List",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/slas"
					},
					"response": []
				},
				{
					"name": "slas — Get (1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/slas/1"
					},
					"response": []
				},
				{
					"name": "slas — Create (demo)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('201/400',()=>pm.expect([201,400]).to.include(pm.response.code));",
									"let j={};try{j=pm.response.json()}catch(e){}",
									"const id = j.id || j['sla_id'];",
									"if (id) pm.environment.set('slas_id', id);",
									"pm.test('id captured (slas_id)', ()=> pm.expect(pm.environment.get('slas_id')||null).to.not.be.null);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"sla_id\": null,\n  \"demo\": \"value\"\n}"
						},
						"url": "{{baseUrl}}/slas"
					},
					"response": []
				},
				{
					"name": "slas — Replace (PUT {created})",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,201,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"sla_id\": 1,\n  \"demo\": \"replace\"\n}"
						},
						"url": "{{baseUrl}}/slas/{{slas_id}}"
					},
					"response": []
				},
				{
					"name": "slas — Update (PATCH {created})",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"demo\": \"patch\"\n}"
						},
						"url": "{{baseUrl}}/slas/{{slas_id}}"
					},
					"response": []
				},
				{
					"name": "slas — Delete (same as Create)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([204,200]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseUrl}}/slas/{{slas_id}}"
					},
					"response": []
				},
				{
					"name": "complaint-policies — List",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/complaint-policies"
					},
					"response": []
				},
				{
					"name": "complaint-policies — Get (1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/complaint-policies/1"
					},
					"response": []
				},
				{
					"name": "complaint-policies — Create (demo)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('201/400',()=>pm.expect([201,400]).to.include(pm.response.code));",
									"let j={};try{j=pm.response.json()}catch(e){}",
									"const id = j.id || j['policy_id'];",
									"if (id) pm.environment.set('complaint_policies_id', id);",
									"pm.test('id captured (complaint_policies_id)', ()=> pm.expect(pm.environment.get('complaint_policies_id')||null).to.not.be.null);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"policy_id\": null,\n  \"demo\": \"value\"\n}"
						},
						"url": "{{baseUrl}}/complaint-policies"
					},
					"response": []
				},
				{
					"name": "complaint-policies — Replace (PUT {created})",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,201,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"policy_id\": 1,\n  \"demo\": \"replace\"\n}"
						},
						"url": "{{baseUrl}}/complaint-policies/{{complaint_policies_id}}"
					},
					"response": []
				},
				{
					"name": "complaint-policies — Update (PATCH {created})",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"demo\": \"patch\"\n}"
						},
						"url": "{{baseUrl}}/complaint-policies/{{complaint_policies_id}}"
					},
					"response": []
				},
				{
					"name": "complaint-policies — Delete (same as Create)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([204,200]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseUrl}}/complaint-policies/{{complaint_policies_id}}"
					},
					"response": []
				},
				{
					"name": "faqs — List",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/faqs"
					},
					"response": []
				},
				{
					"name": "faqs — Get (1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/faqs/1"
					},
					"response": []
				},
				{
					"name": "faqs — Create (demo)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('201/400',()=>pm.expect([201,400]).to.include(pm.response.code));",
									"let j={};try{j=pm.response.json()}catch(e){}",
									"const id = j.id || j['faq_id'];",
									"if (id) pm.environment.set('faqs_id', id);",
									"pm.test('id captured (faqs_id)', ()=> pm.expect(pm.environment.get('faqs_id')||null).to.not.be.null);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"faq_id\": null,\n  \"demo\": \"value\"\n}"
						},
						"url": "{{baseUrl}}/faqs"
					},
					"response": []
				},
				{
					"name": "faqs — Replace (PUT {created})",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,201,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"faq_id\": 1,\n  \"demo\": \"replace\"\n}"
						},
						"url": "{{baseUrl}}/faqs/{{faqs_id}}"
					},
					"response": []
				},
				{
					"name": "faqs — Update (PATCH {created})",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"demo\": \"patch\"\n}"
						},
						"url": "{{baseUrl}}/faqs/{{faqs_id}}"
					},
					"response": []
				},
				{
					"name": "faqs — Delete (same as Create)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([204,200]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseUrl}}/faqs/{{faqs_id}}"
					},
					"response": []
				},
				{
					"name": "chatbot/sessions — List",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/chatbot/sessions"
					},
					"response": []
				},
				{
					"name": "chatbot/sessions — Get (1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/chatbot/sessions/1"
					},
					"response": []
				},
				{
					"name": "chatbot/sessions — Create (demo)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('201/400',()=>pm.expect([201,400]).to.include(pm.response.code));",
									"let j={};try{j=pm.response.json()}catch(e){}",
									"const id = j.id || j['session_id'];",
									"if (id) pm.environment.set('chatbot_sessions_id', id);",
									"pm.test('id captured (chatbot_sessions_id)', ()=> pm.expect(pm.environment.get('chatbot_sessions_id')||null).to.not.be.null);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"session_id\": null,\n  \"demo\": \"value\"\n}"
						},
						"url": "{{baseUrl}}/chatbot/sessions"
					},
					"response": []
				},
				{
					"name": "chatbot/sessions — Replace (PUT {created})",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,201,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"session_id\": 1,\n  \"demo\": \"replace\"\n}"
						},
						"url": "{{baseUrl}}/chatbot/sessions/{{chatbot_sessions_id}}"
					},
					"response": []
				},
				{
					"name": "chatbot/sessions — Update (PATCH {created})",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"demo\": \"patch\"\n}"
						},
						"url": "{{baseUrl}}/chatbot/sessions/{{chatbot_sessions_id}}"
					},
					"response": []
				},
				{
					"name": "chatbot/sessions — Delete (same as Create)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([204,200]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseUrl}}/chatbot/sessions/{{chatbot_sessions_id}}"
					},
					"response": []
				},
				{
					"name": "faq-logs — List",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/faq-logs"
					},
					"response": []
				},
				{
					"name": "faq-logs — Get (1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/faq-logs/1"
					},
					"response": []
				},
				{
					"name": "faq-logs — Create (demo)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('201/400',()=>pm.expect([201,400]).to.include(pm.response.code));",
									"let j={};try{j=pm.response.json()}catch(e){}",
									"const id = j.id || j['log_id'];",
									"if (id) pm.environment.set('faq_logs_id', id);",
									"pm.test('id captured (faq_logs_id)', ()=> pm.expect(pm.environment.get('faq_logs_id')||null).to.not.be.null);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"log_id\": null,\n  \"demo\": \"value\"\n}"
						},
						"url": "{{baseUrl}}/faq-logs"
					},
					"response": []
				},
				{
					"name": "faq-logs — Replace (PUT {created})",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,201,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"log_id\": 1,\n  \"demo\": \"replace\"\n}"
						},
						"url": "{{baseUrl}}/faq-logs/{{faq_logs_id}}"
					},
					"response": []
				},
				{
					"name": "faq-logs — Update (PATCH {created})",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"demo\": \"patch\"\n}"
						},
						"url": "{{baseUrl}}/faq-logs/{{faq_logs_id}}"
					},
					"response": []
				},
				{
					"name": "faq-logs — Delete (same as Create)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([204,200]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseUrl}}/faq-logs/{{faq_logs_id}}"
					},
					"response": []
				},
				{
					"name": "chatbot/messages — List",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/chatbot/messages"
					},
					"response": []
				},
				{
					"name": "chatbot/messages — Get (1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/chatbot/messages/1"
					},
					"response": []
				},
				{
					"name": "chatbot/messages — Create (demo)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('201/400',()=>pm.expect([201,400]).to.include(pm.response.code));",
									"let j={};try{j=pm.response.json()}catch(e){}",
									"const id = j.id || j['message_id'];",
									"if (id) pm.environment.set('chatbot_messages_id', id);",
									"pm.test('id captured (chatbot_messages_id)', ()=> pm.expect(pm.environment.get('chatbot_messages_id')||null).to.not.be.null);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"message_id\": null,\n  \"demo\": \"value\"\n}"
						},
						"url": "{{baseUrl}}/chatbot/messages"
					},
					"response": []
				},
				{
					"name": "chatbot/messages — Replace (PUT {created})",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,201,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"message_id\": 1,\n  \"demo\": \"replace\"\n}"
						},
						"url": "{{baseUrl}}/chatbot/messages/{{chatbot_messages_id}}"
					},
					"response": []
				},
				{
					"name": "chatbot/messages — Update (PATCH {created})",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"demo\": \"patch\"\n}"
						},
						"url": "{{baseUrl}}/chatbot/messages/{{chatbot_messages_id}}"
					},
					"response": []
				},
				{
					"name": "chatbot/messages — Delete (same as Create)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([204,200]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseUrl}}/chatbot/messages/{{chatbot_messages_id}}"
					},
					"response": []
				},
				{
					"name": "terminals — List",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/terminals"
					},
					"response": []
				},
				{
					"name": "terminals — Get (1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/terminals/1"
					},
					"response": []
				},
				{
					"name": "terminals — Create (demo)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('201/400',()=>pm.expect([201,400]).to.include(pm.response.code));",
									"let j={};try{j=pm.response.json()}catch(e){}",
									"const id = j.id || j['terminal_id'];",
									"if (id) pm.environment.set('terminals_id', id);",
									"pm.test('id captured (terminals_id)', ()=> pm.expect(pm.environment.get('terminals_id')||null).to.not.be.null);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"terminal_id\": null,\n  \"demo\": \"value\"\n}"
						},
						"url": "{{baseUrl}}/terminals"
					},
					"response": []
				},
				{
					"name": "terminals — Replace (PUT {created})",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,201,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"terminal_id\": 1,\n  \"demo\": \"replace\"\n}"
						},
						"url": "{{baseUrl}}/terminals/{{terminals_id}}"
					},
					"response": []
				},
				{
					"name": "terminals — Update (PATCH {created})",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"demo\": \"patch\"\n}"
						},
						"url": "{{baseUrl}}/terminals/{{terminals_id}}"
					},
					"response": []
				},
				{
					"name": "terminals — Delete (same as Create)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([204,200]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseUrl}}/terminals/{{terminals_id}}"
					},
					"response": []
				},
				{
					"name": "ticket-transactions — List",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/ticket-transactions"
					},
					"response": []
				},
				{
					"name": "ticket-transactions — Get (1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/ticket-transactions/1"
					},
					"response": []
				},
				{
					"name": "ticket-transactions — Create (demo)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('201/400',()=>pm.expect([201,400]).to.include(pm.response.code));",
									"let j={};try{j=pm.response.json()}catch(e){}",
									"const id = j.id || j['ticket_txn_id'];",
									"if (id) pm.environment.set('ticket_transactions_id', id);",
									"pm.test('id captured (ticket_transactions_id)', ()=> pm.expect(pm.environment.get('ticket_transactions_id')||null).to.not.be.null);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"ticket_txn_id\": null,\n  \"demo\": \"value\"\n}"
						},
						"url": "{{baseUrl}}/ticket-transactions"
					},
					"response": []
				},
				{
					"name": "ticket-transactions — Replace (PUT {created})",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,201,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"ticket_txn_id\": 1,\n  \"demo\": \"replace\"\n}"
						},
						"url": "{{baseUrl}}/ticket-transactions/{{ticket_transactions_id}}"
					},
					"response": []
				},
				{
					"name": "ticket-transactions — Update (PATCH {created})",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"demo\": \"patch\"\n}"
						},
						"url": "{{baseUrl}}/ticket-transactions/{{ticket_transactions_id}}"
					},
					"response": []
				},
				{
					"name": "ticket-transactions — Delete (same as Create)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([204,200]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseUrl}}/ticket-transactions/{{ticket_transactions_id}}"
					},
					"response": []
				},
				{
					"name": "tickets — List",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/tickets"
					},
					"response": []
				},
				{
					"name": "tickets — Get (1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/tickets/1"
					},
					"response": []
				},
				{
					"name": "tickets — Create (demo)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('201/400',()=>pm.expect([201,400]).to.include(pm.response.code));",
									"let j={};try{j=pm.response.json()}catch(e){}",
									"const id = j.id || j['ticket_id'];",
									"if (id) pm.environment.set('tickets_id', id);",
									"pm.test('id captured (tickets_id)', ()=> pm.expect(pm.environment.get('tickets_id')||null).to.not.be.null);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"ticket_id\": null,\n  \"demo\": \"value\"\n}"
						},
						"url": "{{baseUrl}}/tickets"
					},
					"response": []
				},
				{
					"name": "tickets — Replace (PUT {created})",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,201,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"ticket_id\": 1,\n  \"demo\": \"replace\"\n}"
						},
						"url": "{{baseUrl}}/tickets/{{tickets_id}}"
					},
					"response": []
				},
				{
					"name": "tickets — Update (PATCH {created})",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"demo\": \"patch\"\n}"
						},
						"url": "{{baseUrl}}/tickets/{{tickets_id}}"
					},
					"response": []
				},
				{
					"name": "tickets — Delete (same as Create)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([204,200]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseUrl}}/tickets/{{tickets_id}}"
					},
					"response": []
				},
				{
					"name": "ticket-activities — List",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/ticket-activities"
					},
					"response": []
				},
				{
					"name": "ticket-activities — Get (1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/ticket-activities/1"
					},
					"response": []
				},
				{
					"name": "ticket-activities — Create (demo)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('201/400',()=>pm.expect([201,400]).to.include(pm.response.code));",
									"let j={};try{j=pm.response.json()}catch(e){}",
									"const id = j.id || j['activity_id'];",
									"if (id) pm.environment.set('ticket_activities_id', id);",
									"pm.test('id captured (ticket_activities_id)', ()=> pm.expect(pm.environment.get('ticket_activities_id')||null).to.not.be.null);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"activity_id\": null,\n  \"demo\": \"value\"\n}"
						},
						"url": "{{baseUrl}}/ticket-activities"
					},
					"response": []
				},
				{
					"name": "ticket-activities — Replace (PUT {created})",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,201,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"activity_id\": 1,\n  \"demo\": \"replace\"\n}"
						},
						"url": "{{baseUrl}}/ticket-activities/{{ticket_activities_id}}"
					},
					"response": []
				},
				{
					"name": "ticket-activities — Update (PATCH {created})",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"demo\": \"patch\"\n}"
						},
						"url": "{{baseUrl}}/ticket-activities/{{ticket_activities_id}}"
					},
					"response": []
				},
				{
					"name": "ticket-activities — Delete (same as Create)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([204,200]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseUrl}}/ticket-activities/{{ticket_activities_id}}"
					},
					"response": []
				},
				{
					"name": "attachments — List",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/attachments"
					},
					"response": []
				},
				{
					"name": "attachments — Get (1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/attachments/1"
					},
					"response": []
				},
				{
					"name": "attachments — Create (demo)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('201/400',()=>pm.expect([201,400]).to.include(pm.response.code));",
									"let j={};try{j=pm.response.json()}catch(e){}",
									"const id = j.id || j['attachment_id'];",
									"if (id) pm.environment.set('attachments_id', id);",
									"pm.test('id captured (attachments_id)', ()=> pm.expect(pm.environment.get('attachments_id')||null).to.not.be.null);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"attachment_id\": null,\n  \"demo\": \"value\"\n}"
						},
						"url": "{{baseUrl}}/attachments"
					},
					"response": []
				},
				{
					"name": "attachments — Replace (PUT {created})",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,201,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"attachment_id\": 1,\n  \"demo\": \"replace\"\n}"
						},
						"url": "{{baseUrl}}/attachments/{{attachments_id}}"
					},
					"response": []
				},
				{
					"name": "attachments — Update (PATCH {created})",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"demo\": \"patch\"\n}"
						},
						"url": "{{baseUrl}}/attachments/{{attachments_id}}"
					},
					"response": []
				},
				{
					"name": "attachments — Delete (same as Create)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([204,200]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseUrl}}/attachments/{{attachments_id}}"
					},
					"response": []
				},
				{
					"name": "ticket-uic-escalations — List",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/ticket-uic-escalations"
					},
					"response": []
				},
				{
					"name": "ticket-uic-escalations — Get (1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/ticket-uic-escalations/1"
					},
					"response": []
				},
				{
					"name": "ticket-uic-escalations — Create (demo)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('201/400',()=>pm.expect([201,400]).to.include(pm.response.code));",
									"let j={};try{j=pm.response.json()}catch(e){}",
									"const id = j.id || j['escalation_id'];",
									"if (id) pm.environment.set('ticket_uic_escalations_id', id);",
									"pm.test('id captured (ticket_uic_escalations_id)', ()=> pm.expect(pm.environment.get('ticket_uic_escalations_id')||null).to.not.be.null);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"escalation_id\": null,\n  \"demo\": \"value\"\n}"
						},
						"url": "{{baseUrl}}/ticket-uic-escalations"
					},
					"response": []
				},
				{
					"name": "ticket-uic-escalations — Replace (PUT {created})",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,201,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"escalation_id\": 1,\n  \"demo\": \"replace\"\n}"
						},
						"url": "{{baseUrl}}/ticket-uic-escalations/{{ticket_uic_escalations_id}}"
					},
					"response": []
				},
				{
					"name": "ticket-uic-escalations — Update (PATCH {created})",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"demo\": \"patch\"\n}"
						},
						"url": "{{baseUrl}}/ticket-uic-escalations/{{ticket_uic_escalations_id}}"
					},
					"response": []
				},
				{
					"name": "ticket-uic-escalations — Delete (same as Create)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([204,200]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseUrl}}/ticket-uic-escalations/{{ticket_uic_escalations_id}}"
					},
					"response": []
				},
				{
					"name": "feedback — List",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/feedback"
					},
					"response": []
				},
				{
					"name": "feedback — Get (1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/feedback/1"
					},
					"response": []
				},
				{
					"name": "feedback — Create (demo)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('201/400',()=>pm.expect([201,400]).to.include(pm.response.code));",
									"let j={};try{j=pm.response.json()}catch(e){}",
									"const id = j.id || j['feedback_id'];",
									"if (id) pm.environment.set('feedback_id', id);",
									"pm.test('id captured (feedback_id)', ()=> pm.expect(pm.environment.get('feedback_id')||null).to.not.be.null);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"feedback_id\": null,\n  \"demo\": \"value\"\n}"
						},
						"url": "{{baseUrl}}/feedback"
					},
					"response": []
				},
				{
					"name": "feedback — Replace (PUT {created})",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,201,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"feedback_id\": 1,\n  \"demo\": \"replace\"\n}"
						},
						"url": "{{baseUrl}}/feedback/{{feedback_id}}"
					},
					"response": []
				},
				{
					"name": "feedback — Update (PATCH {created})",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"demo\": \"patch\"\n}"
						},
						"url": "{{baseUrl}}/feedback/{{feedback_id}}"
					},
					"response": []
				},
				{
					"name": "feedback — Delete (same as Create)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([204,200]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseUrl}}/feedback/{{feedback_id}}"
					},
					"response": []
				},
				{
					"name": "notifications — List",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/notifications"
					},
					"response": []
				},
				{
					"name": "notifications — Get (1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/notifications/1"
					},
					"response": []
				},
				{
					"name": "notifications — Create (demo)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('201/400',()=>pm.expect([201,400]).to.include(pm.response.code));",
									"let j={};try{j=pm.response.json()}catch(e){}",
									"const id = j.id || j['notification_id'];",
									"if (id) pm.environment.set('notifications_id', id);",
									"pm.test('id captured (notifications_id)', ()=> pm.expect(pm.environment.get('notifications_id')||null).to.not.be.null);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"notification_id\": null,\n  \"demo\": \"value\"\n}"
						},
						"url": "{{baseUrl}}/notifications"
					},
					"response": []
				},
				{
					"name": "notifications — Replace (PUT {created})",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,201,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"notification_id\": 1,\n  \"demo\": \"replace\"\n}"
						},
						"url": "{{baseUrl}}/notifications/{{notifications_id}}"
					},
					"response": []
				},
				{
					"name": "notifications — Update (PATCH {created})",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"demo\": \"patch\"\n}"
						},
						"url": "{{baseUrl}}/notifications/{{notifications_id}}"
					},
					"response": []
				},
				{
					"name": "notifications — Delete (same as Create)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([204,200]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseUrl}}/notifications/{{notifications_id}}"
					},
					"response": []
				},
				{
					"name": "chat-messages — List",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/chat-messages"
					},
					"response": []
				},
				{
					"name": "chat-messages — Get (1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/chat-messages/1"
					},
					"response": []
				},
				{
					"name": "chat-messages — Create (demo)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('201/400',()=>pm.expect([201,400]).to.include(pm.response.code));",
									"let j={};try{j=pm.response.json()}catch(e){}",
									"const id = j.id || j['chat_id'];",
									"if (id) pm.environment.set('chat_messages_id', id);",
									"pm.test('id captured (chat_messages_id)', ()=> pm.expect(pm.environment.get('chat_messages_id')||null).to.not.be.null);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"chat_id\": null,\n  \"demo\": \"value\"\n}"
						},
						"url": "{{baseUrl}}/chat-messages"
					},
					"response": []
				},
				{
					"name": "chat-messages — Replace (PUT {created})",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,201,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"chat_id\": 1,\n  \"demo\": \"replace\"\n}"
						},
						"url": "{{baseUrl}}/chat-messages/{{chat_messages_id}}"
					},
					"response": []
				},
				{
					"name": "chat-messages — Update (PATCH {created})",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"demo\": \"patch\"\n}"
						},
						"url": "{{baseUrl}}/chat-messages/{{chat_messages_id}}"
					},
					"response": []
				},
				{
					"name": "chat-messages — Delete (same as Create)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([204,200]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseUrl}}/chat-messages/{{chat_messages_id}}"
					},
					"response": []
				},
				{
					"name": "call-logs — List",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/call-logs"
					},
					"response": []
				},
				{
					"name": "call-logs — Get (1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/call-logs/1"
					},
					"response": []
				},
				{
					"name": "call-logs — Create (demo)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('201/400',()=>pm.expect([201,400]).to.include(pm.response.code));",
									"let j={};try{j=pm.response.json()}catch(e){}",
									"const id = j.id || j['call_id'];",
									"if (id) pm.environment.set('call_logs_id', id);",
									"pm.test('id captured (call_logs_id)', ()=> pm.expect(pm.environment.get('call_logs_id')||null).to.not.be.null);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"call_id\": null,\n  \"demo\": \"value\"\n}"
						},
						"url": "{{baseUrl}}/call-logs"
					},
					"response": []
				},
				{
					"name": "call-logs — Replace (PUT {created})",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,201,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"call_id\": 1,\n  \"demo\": \"replace\"\n}"
						},
						"url": "{{baseUrl}}/call-logs/{{call_logs_id}}"
					},
					"response": []
				},
				{
					"name": "call-logs — Update (PATCH {created})",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([200,404]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"demo\": \"patch\"\n}"
						},
						"url": "{{baseUrl}}/call-logs/{{call_logs_id}}"
					},
					"response": []
				},
				{
					"name": "call-logs — Delete (same as Create)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.expect([204,200]).to.include(pm.response.code);"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseUrl}}/call-logs/{{call_logs_id}}"
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3001/v1"
		}
	]
}